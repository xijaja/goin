# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

# 工作流名称
name: Fly Deploy

# 触发条件：当 main 分支收到推送时
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy app
    # 指定运行环境为最新版本的 Ubuntu
    runs-on: ubuntu-latest
    # 确保同一时间只运行一个部署任务，避免并发冲突
    concurrency: deploy-group

    steps:
      # 步骤1: 检出代码
      - uses: actions/checkout@v4

      # 步骤2: 设置 Node.js 环境
      - uses: actions/setup-node@v4
        with:
          node-version: "20" # 使用 Node.js 20.x 版本

      # 步骤3: 安装 pnpm 包管理器
      - uses: pnpm/action-setup@v2
        with:
          version: 9 # 使用 pnpm 9.x 版本

      # 步骤4: 配置 pnpm 缓存
      # 获取 pnpm 存储目录路径，用于后续缓存
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # 步骤5: 设置依赖缓存
      # 这可以显著提升后续构建的速度
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          # 缓存 pnpm store 目录
          path: ${{ env.STORE_PATH }}
          # 使用 pnpm-lock.yaml 的哈希作为缓存键
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 步骤6: 构建前端应用
      # 这一步很重要，因为后端需要嵌入构建后的静态文件
      - name: Build Frontend
        run: |
          cd svelte            # 进入前端项目目录
          pnpm install        # 安装依赖
          pnpm run build      # 构建前端项目

      # 步骤7: 设置 Fly.io CLI
      - uses: superfly/flyctl-actions/setup-flyctl@master

      # 步骤8: 部署到 Fly.io
      # --remote-only 表示在 Fly.io 的服务器上构建，而不是本地构建
      - run: flyctl deploy --remote-only
        env:
          # 使用 GitHub Secrets 中存储的 Fly.io API 令牌
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
